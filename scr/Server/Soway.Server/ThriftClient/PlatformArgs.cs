/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.soldier.platform.svr_platform.comm
{

  /// <summary>
  /// 平台级参数，方便以后进行治理和差错
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlatformArgs : TBase
  {
    private string _sourceDesc;
    private int _sourceIpV4;
    private string _remoteAddress;
    private int _remotePort;

    public string SourceDesc
    {
      get
      {
        return _sourceDesc;
      }
      set
      {
        __isset.sourceDesc = true;
        this._sourceDesc = value;
      }
    }

    public int SourceIpV4
    {
      get
      {
        return _sourceIpV4;
      }
      set
      {
        __isset.sourceIpV4 = true;
        this._sourceIpV4 = value;
      }
    }

    public string RemoteAddress
    {
      get
      {
        return _remoteAddress;
      }
      set
      {
        __isset.remoteAddress = true;
        this._remoteAddress = value;
      }
    }

    public int RemotePort
    {
      get
      {
        return _remotePort;
      }
      set
      {
        __isset.remotePort = true;
        this._remotePort = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sourceDesc;
      public bool sourceIpV4;
      public bool remoteAddress;
      public bool remotePort;
    }

    public PlatformArgs() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SourceDesc = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              SourceIpV4 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              RemoteAddress = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RemotePort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlatformArgs");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SourceDesc != null && __isset.sourceDesc) {
        field.Name = "sourceDesc";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SourceDesc);
        oprot.WriteFieldEnd();
      }
      if (__isset.sourceIpV4) {
        field.Name = "sourceIpV4";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SourceIpV4);
        oprot.WriteFieldEnd();
      }
      if (RemoteAddress != null && __isset.remoteAddress) {
        field.Name = "remoteAddress";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RemoteAddress);
        oprot.WriteFieldEnd();
      }
      if (__isset.remotePort) {
        field.Name = "remotePort";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RemotePort);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlatformArgs(");
      sb.Append("SourceDesc: ");
      sb.Append(SourceDesc);
      sb.Append(",SourceIpV4: ");
      sb.Append(SourceIpV4);
      sb.Append(",RemoteAddress: ");
      sb.Append(RemoteAddress);
      sb.Append(",RemotePort: ");
      sb.Append(RemotePort);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
